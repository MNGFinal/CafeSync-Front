import { useEffect, useState } from "react";
import styles from "./HQEmployee.module.css";
import { getEmployeeList } from "../../../apis/chat/chatApi";
import { AiOutlineSend } from "react-icons/ai";
import CreateChatRoom from "./HQCreateChatRoom";
import { useSelector } from "react-redux";

function HQEmployee({ onCreateRoom }) {
  const [employees, setEmployees] = useState([]); // Ï†ÑÏ≤¥ ÏßÅÏõê Î™©Î°ù
  const [searchText, setSearchText] = useState(""); // Í≤ÄÏÉâÏ∞Ω ÌÖçÏä§Ìä∏
  const [showModal, setShowModal] = useState(false); // Î™®Îã¨ Ïó¥Í≥† Îã´Í∏∞
  const [roomName, setRoomName] = useState(""); // Ï±ÑÌåÖÎ∞© Ï†úÎ™©

  const { user } = useSelector((state) => state.auth);
  const loggedInEmpCode = user?.employee?.empCode; // Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò empCode

  console.log("‚úÖ user Ï†ïÎ≥¥:", user);
  console.log("‚úÖ Î°úÍ∑∏Ïù∏Ìïú empCode:", loggedInEmpCode);

  // ÏôºÏ™Ω(ÏßÅÏõê Î™©Î°ù)
  const [availableEmployees, setAvailableEmployees] = useState([]);
  // Ïò§Î•∏Ï™Ω(Ï±ÑÌåÖÎ∞© Ï∞∏Ïó¨Ïûê)
  const [selectedEmployees, setSelectedEmployees] = useState([]);

  useEffect(() => {
    const fetchEmployees = async () => {
      try {
        const data = await getEmployeeList();

        console.log("üöÄ ÏßÅÏõê API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", data);

        if (!data || !data.data) {
          console.error("‚ùå ÏßÅÏõê Î™©Î°ùÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå!", data);
          return;
        }

        setEmployees(data.data);
      } catch (error) {
        console.error("‚ùå ÏßÅÏõê Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò:", error);
      }
    };
    fetchEmployees();
  }, []);

  // üîé Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∞æÍ∏∞ (ReduxÏóêÏÑúÍ∞Ä ÏïÑÎãàÎùº ÏßÅÏõê Î™©Î°ùÏóêÏÑú Ï∞æÏùå)
  const loggedInUserData = employees.find(
    (emp) => emp.empCode === loggedInEmpCode
  );

  console.log("üîç Î°úÍ∑∏Ïù∏Ìïú Ïú†Ï†Ä Ï†ïÎ≥¥:", loggedInUserData);

  // üîé Í≤ÄÏÉâ ÌïÑÌÑ∞ÎßÅ: Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÎäî Ï†úÏô∏
  const filteredEmployees = employees.filter((emp) => {
    if (loggedInEmpCode && emp.empCode === loggedInEmpCode) return false;
    const franName = emp.franChise?.franName?.toLowerCase() || "";
    const empName = emp.empName?.toLowerCase() || "";
    const lowerSearch = searchText.toLowerCase();
    return franName.includes(lowerSearch) || empName.includes(lowerSearch);
  });

  /** Î™®Îã¨ Ïó¥Í∏∞ */
  const openModal = () => {
    const notSelected = filteredEmployees.filter(
      (emp) => !selectedEmployees.some((sel) => sel.empCode === emp.empCode)
    );
    setAvailableEmployees(notSelected);
    setRoomName("");
    setShowModal(true);
  };

  /** Î™®Îã¨ Îã´Í∏∞ */
  const closeModal = () => {
    setShowModal(false);
  };

  return (
    <div className={styles.employeeContainer}>
      <div className={styles.top}>
        <div className={styles.title}>
          <h2>ÏßÅÏõêÎ™©Î°ù</h2>
        </div>
        <div className={styles.searchBox}>
          <input
            type="text"
            placeholder="Í∞ÄÎßπÏ†êÎ™Ö or Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
          />
        </div>
      </div>

      <div className={styles.empBox}>
        {filteredEmployees.map((employee) => (
          <div key={employee.empCode} className={styles.employeeCard}>
            <div className={styles.leftSide}>
              <img
                src={employee.profileImage || "/images/default-profile.png"}
                alt={`${employee.empName} ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ`}
                className={styles.profileImage}
              />
              <p className={styles.employeeInfo}>
                {employee.franChise?.franName}
              </p>
              <div className={styles.nameJobBox}>
                {employee.empName} {employee?.job?.jobName}
              </div>
            </div>
            <AiOutlineSend
              className={styles.sendIcon}
              onClick={() => {
                openModal();
              }}
            />
          </div>
        ))}
      </div>

      {showModal && (
        <CreateChatRoom
          isOpen={showModal}
          onClose={closeModal}
          onConfirm={(newRoom) => {
            onCreateRoom?.(newRoom); // ‚úÖ ÏÉà Ï±ÑÌåÖÎ∞© Ï¶âÏãú Î∞òÏòÅ
            setShowModal(false);
          }}
          availableEmployeesFromParent={filteredEmployees}
          loggedInUserData={loggedInUserData}
        />
      )}
    </div>
  );
}

export default HQEmployee;
