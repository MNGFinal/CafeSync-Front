import React, { useState, useEffect } from "react";
import styles from "./Duty.module.css";
import { getFranTaxList, deleteFranTaxList } from "../../../apis/slip/slipApi";
import { useSelector } from "react-redux";
import SModal from "../../../components/SModal";
import { Player } from "@lottiefiles/react-lottie-player";
import modalStyle from "../../../components/ModalButton.module.css";
import ReactPaginate from "react-paginate";
import { AiOutlineReload } from "react-icons/ai";
import generateInvoicePDF from "../../../config/generateInvoicePDF";
import { useNavigate } from "react-router-dom"; // üëà ÌéòÏù¥ÏßÄ Ïù¥ÎèôÏùÑ ÏúÑÌïú ÌõÖ Ï∂îÍ∞Ä

function Duty() {
  const franCode = useSelector(
    (state) => state.auth?.user?.franchise?.franCode ?? null
  );

  // ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑú(TaxDTO) Îç∞Ïù¥ÌÑ∞Î•º APIÎ°úÎ∂ÄÌÑ∞ Î∞õÏïÑÏò¨ ÏÉÅÌÉú
  const [invoiceData, setInvoiceData] = useState([]); // ‚úÖ Îπà Î∞∞Ïó¥ÏùÑ Ï¥àÍ∏∞Í∞íÏúºÎ°ú ÏÑ§Ï†ï

  const [selectedInvoice, setSelectedInvoice] = useState(null);

  // Í∏∞Î≥∏ ÎÇ†Ïßú Î≤îÏúÑ ÏÑ§Ï†ï (Ï†ÑÏ≤¥ Ï°∞Ìöå)
  const defaultStartDate = "0000-01-01";
  const defaultEndDate = "9999-12-31";

  const [currentPage, setCurrentPage] = useState(0); // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const itemsPerPage = 12; // ÌéòÏù¥ÏßÄÎãπ 12Í∞úÏî© ÌëúÏãú
  const [totalPages, setTotalPages] = useState(1); // Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄ Ïàò ÏÉÅÌÉú
  const [lottieAnimation, setLottieAnimation] = useState(
    "/animations/warning.json"
  );

  // ‚úÖ ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏóêÏÑú Î≥¥Ïó¨Ï§Ñ Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
  // ‚úÖ ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏóêÏÑú Î≥¥Ïó¨Ï§Ñ Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
  const offset = currentPage * itemsPerPage;
  const currentPageData = Array.isArray(invoiceData)
    ? invoiceData.slice(offset, offset + itemsPerPage)
    : [];

  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  const handleStartDateChange = (e) => setStartDate(e.target.value);
  const handleEndDateChange = (e) => setEndDate(e.target.value);

  const [isModalOpen, setIsModalOpen] = useState(false); // üî• Î™®Îã¨ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [modalMessage, setModalMessage] = useState(""); // üî• Î™®Îã¨ Î©îÏãúÏßÄ Ï∂îÍ∞Ä

  const navigate = useNavigate(); // üëà ÌéòÏù¥ÏßÄ Ïù¥Îèô Ìï®Ïàò

  const [selectedInvoices, setSelectedInvoices] = useState([]); // ÏÑ†ÌÉùÎêú ÏÑ∏Í∏àÍ≥ÑÏÇ∞ÏÑú Î™©Î°ù

  const handleSelectAll = (e) => {
    if (e.target.checked) {
      setSelectedInvoices(invoiceData.map((invoice) => invoice.taxId)); // Î™®Îì† taxId Ï∂îÍ∞Ä
    } else {
      setSelectedInvoices([]); // ÏÑ†ÌÉù Ìï¥Ï†ú
    }
  };

  const handleSelectRow = (taxId) => {
    setSelectedInvoices(
      (prevSelected) =>
        prevSelected.includes(taxId)
          ? prevSelected.filter((id) => id !== taxId) // Ï≤¥ÌÅ¨ Ìï¥Ï†ú
          : [...prevSelected, taxId] // Ï≤¥ÌÅ¨ Ï∂îÍ∞Ä
    );
  };

  const deleteSelectedInvoices = async () => {
    if (selectedInvoices.length === 0) {
      setLottieAnimation("/animations/warning.json"); // ‚ùóÔ∏èÍ≤ΩÍ≥† Ïï†ÎãàÎ©îÏù¥ÏÖò
      setModalMessage("ÏÇ≠Ï†úÌï† ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
      setIsModalOpen(true);
      return;
    }

    try {
      await deleteFranTaxList(selectedInvoices); // ‚úÖ API Ìò∏Ï∂ú (ÏÇ≠Ï†úÌï† taxId Î∞∞Ïó¥ Ï†ÑÎã¨)

      setInvoiceData(
        invoiceData.filter(
          (invoice) => !selectedInvoices.includes(invoice.taxId)
        )
      ); // ‚úÖ UIÏóêÏÑúÎèÑ ÏÇ≠Ï†ú Î∞òÏòÅ
      setSelectedInvoices([]); // ‚úÖ ÏÑ†ÌÉù Î™©Î°ù Ï¥àÍ∏∞Ìôî

      // ‚úÖ ÏÑ±Í≥µ Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†ÅÏö©
      setLottieAnimation("/animations/success-check.json");
      setModalMessage("ÏÑ†ÌÉùÎêú ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
      setIsModalOpen(true);
    } catch (error) {
      console.error("ÏÇ≠Ï†ú Ïò§Î•ò:", error);

      setLottieAnimation("/animations/error.json"); // ‚ùå Ïã§Ìå® Ïï†ÎãàÎ©îÏù¥ÏÖò
      setModalMessage("ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
      setIsModalOpen(true);
    }
  };

  const handleSearch = () => {
    if (!startDate || !endDate) {
      setModalMessage("Ï°∞ÌöåÌï† ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
      setIsModalOpen(true);
      return;
    }

    // üî• ÎÇ†Ïßú Í≤ÄÏ¶ù: ÏãúÏûë ÎÇ†ÏßúÍ∞Ä Ï¢ÖÎ£å ÎÇ†ÏßúÎ≥¥Îã§ Ïù¥ÌõÑÏùº Í≤ΩÏö∞ Í≤ÄÏÉâ Ï∞®Îã®
    if (new Date(startDate) > new Date(endDate)) {
      setModalMessage("ÏãúÏûë ÎÇ†ÏßúÎäî Ï¢ÖÎ£å ÎÇ†ÏßúÎ≥¥Îã§ Ïù¥ÌõÑÏùº Ïàò ÏóÜÏäµÎãàÎã§.");
      setIsModalOpen(true);
      return;
    }

    getFranTaxList(franCode, startDate, endDate)
      .then((data) => {
        if (data.data.length === 0) {
          setModalMessage(
            `${startDate} ~ ${endDate} Ïóê Ìï¥ÎãπÌïòÎäî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.`
          );
          setIsModalOpen(true);
        } else {
          setInvoiceData(data.data);
          setCurrentPage(0);
        }
      })
      .catch((error) => {
        setModalMessage("Ìï¥Îãπ ÎÇ†ÏßúÏóê ÎåÄÌïú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
        setIsModalOpen(true);
      });
  };

  const handleReset = () => {
    setStartDate("");
    setEndDate("");
    fetchInvoices(1); // Ï†ÑÏ≤¥ Ï°∞Ìöå
  };

  useEffect(() => {
    if (franCode) {
      getFranTaxList(franCode, defaultStartDate, defaultEndDate)
        .then((data) => {
          console.log("API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", data); // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
          const receivedData = Array.isArray(data.data) ? data.data : [];

          setInvoiceData(receivedData);

          if (receivedData.length === 0) {
            setModalMessage("Ï°∞ÌöåÎêú ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
            setIsModalOpen(true);

            // 3Ï¥à ÌõÑ Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            setTimeout(() => {
              navigate(-1); // üëà Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            }, 3000);
          }
        })
        .catch((error) => {
          console.error("ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò:", error);
          setInvoiceData([]); // ÏóêÎü¨ Î∞úÏÉù Ïãú Îπà Î∞∞Ïó¥ ÏÑ§Ï†ï
          setModalMessage("Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
          setIsModalOpen(true);

          // 3Ï¥à ÌõÑ Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          setTimeout(() => {
            navigate(-1);
          }, 3000);
        });
    }
  }, [franCode, navigate]);

  // Ìñâ ÌÅ¥Î¶≠ Ïãú ÏÉÅÏÑ∏ ÌëúÏãúÎ•º ÏúÑÌï¥ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
  const handleRowClick = (invoice) => {
    setSelectedInvoice(invoice);
  };

  const fetchInvoices = (page) => {
    getFranTaxList(
      franCode,
      defaultStartDate,
      defaultEndDate,
      page,
      itemsPerPage // ‚úÖ Ìïú ÌéòÏù¥ÏßÄÏóê 12Í∞úÏî© Í∞ÄÏ†∏Ïò§ÎèÑÎ°ù ÏàòÏ†ï
    )
      .then((data) => {
        setInvoiceData(data.data);
        setTotalPages(data.totalPages);
      })
      .catch((error) => {
        console.error("ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò:", error);
      });
  };

  useEffect(() => {
    if (franCode) {
      fetchInvoices(currentPage + 1); // API ÌéòÏù¥ÏßÄ ÏãúÏûë Î≤àÌò∏Ïóê ÎßûÍ≤å Ï°∞Ï†ï
    }
  }, [franCode, currentPage]);

  const handlePageChange = ({ selected }) => {
    setCurrentPage(selected); // ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Ïãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ‚Üí useEffectÍ∞Ä Ïã§ÌñâÎê®
  };

  const formatBusinessNumber = (businessNum) => {
    if (!businessNum) return "-";
    return businessNum.replace(/(\d{3})(\d{2})(\d{5})/, "$1-$2-$3");
  };

  return (
    <>
      <div className="page-header">
        <h3>ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑú</h3>
      </div>

      <div className={styles.defSection}>
        <div className={styles.addSection}>
          <div className={styles.searchBox}>
            <input
              type="date"
              value={startDate}
              onChange={handleStartDateChange}
            />
            ~
            <input type="date" value={endDate} onChange={handleEndDateChange} />
            <button className={styles.searchBtn} onClick={handleSearch}>
              Í≤ÄÏÉâ
            </button>
            <button className={styles.resetBtn} onClick={handleReset}>
              <AiOutlineReload />
            </button>
            <button
              className={styles.deleteBtn}
              onClick={deleteSelectedInvoices}
            >
              ÏÇ≠Ï†ú
            </button>
          </div>

          {/* ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑú Î™©Î°ù ÌÖåÏù¥Î∏î */}
          <table className={styles.tableStyle}>
            <thead>
              <tr>
                <th>
                  <input
                    type="checkbox"
                    onChange={handleSelectAll}
                    checked={
                      selectedInvoices.length === invoiceData.length &&
                      invoiceData.length > 0
                    }
                  />
                </th>
                <th>ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑú Î≤àÌò∏</th>
                <th>Î∞úÌñâ ÏùºÏûê</th>
                <th>Í≥µÍ∏âÏûê</th>
                <th>Í≥µÍ∏âÎ∞õÎäîÏûêÏûê</th>
                <th>Ìï©Í≥Ñ</th>
              </tr>
            </thead>
            <tbody>
              {currentPageData.length > 0 ? (
                currentPageData.map((invoice) => (
                  <tr
                    key={invoice.taxId}
                    onClick={() => handleRowClick(invoice)}
                    style={{ cursor: "pointer" }}
                  >
                    <td>
                      <input
                        type="checkbox"
                        checked={selectedInvoices.includes(invoice.taxId)}
                        onChange={() => handleSelectRow(invoice.taxId)}
                      />
                    </td>
                    <td>{invoice.taxId}</td>
                    <td>{invoice.taxDate}</td>
                    <td>{invoice.slip?.venCode?.venName ?? "-"}</td>
                    <td>{invoice.franchise?.franName ?? "-"}</td>
                    <td>
                      {(invoice.slip?.debit != null
                        ? invoice.slip.debit
                        : invoice.slip?.credit
                      )?.toLocaleString("ko-KR")}{" "}
                      Ïõê
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan="6"
                    style={{
                      textAlign: "center",
                      padding: "20px",
                      fontSize: "16px",
                      fontWeight: "bold",
                      color: "#888",
                    }}
                  >
                    Ï°∞ÌöåÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.
                  </td>
                </tr>
              )}
            </tbody>
          </table>

          <ReactPaginate
            previousLabel={"Ïù¥Ï†Ñ"}
            nextLabel={"Îã§Ïùå"}
            breakLabel={"..."}
            pageCount={Math.ceil(invoiceData.length / itemsPerPage)} // ‚úÖ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Í∞úÏàò Í∏∞Ï§ÄÏúºÎ°ú ÌéòÏù¥ÏßÄ Ïàò Í≥ÑÏÇ∞
            forcePage={currentPage}
            onPageChange={handlePageChange}
            containerClassName={styles.paginationContainer}
            activeClassName={styles.activePage}
            disabledClassName={styles.disabled}
          />
        </div>

        {/* ÏÉÅÏÑ∏ ÏòÅÏó≠ */}
        <div className={styles.listSection}>
          {selectedInvoice && (
            <button
              className={styles.pdfBtn}
              onClick={() => generateInvoicePDF(selectedInvoice)}
            >
              PDF ÌååÏùº ÏÉùÏÑ±
            </button>
          )}
          {selectedInvoice ? (
            <div className={styles.invoiceWrapper}>
              <h3 className={styles.invoiceTitle}>ÏÑ∏ Í∏à Í≥Ñ ÏÇ∞ ÏÑú</h3>
              <table className={styles.invoiceTable}>
                <tbody>
                  <tr>
                    <td className={styles.label}>ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑú Î≤àÌò∏</td>
                    <td>{selectedInvoice.taxId}</td>
                    <td className={styles.label}>Î∞úÌñâ ÏùºÏûê</td>
                    <td>{selectedInvoice.taxDate}</td>
                  </tr>

                  <tr>
                    <td className={styles.label}>Í≥µÍ∏âÏûê</td>
                    <td>{selectedInvoice.slip?.venCode.venName}</td>
                    <td className={styles.label}>ÏÇ¨ÏóÖÏûêÎì±Î°ùÎ≤àÌò∏</td>
                    <td>
                      {formatBusinessNumber(
                        selectedInvoice.slip?.venCode.businessNum
                      )}
                    </td>
                  </tr>

                  <tr>
                    <td className={styles.label}>Í≥µÍ∏âÏûê Ï£ºÏÜå</td>
                    <td colSpan="3">{selectedInvoice.slip?.venCode.venAddr}</td>
                  </tr>

                  <tr>
                    <td className={styles.label}>Í≥µÍ∏âÎ∞õÎäîÏûê</td>
                    <td>{selectedInvoice.franchise?.franName}</td>
                    <td className={styles.label}>Ï†ÑÌëú Íµ¨Î∂Ñ</td>
                    <td>{selectedInvoice.slip?.slipDivision}</td>
                  </tr>

                  <tr>
                    <td className={styles.label}>Í≥µÍ∏âÎ∞õÎäîÏûê Ï£ºÏÜå</td>
                    <td colSpan={"3"}>
                      {selectedInvoice.franchise.franAddress}
                    </td>
                  </tr>

                  <tr>
                    <td className={styles.label}>Í≥ÑÏ†ïÍ≥ºÎ™© ÏΩîÎìú</td>
                    <td>{selectedInvoice.slip?.actCode?.actCode}</td>{" "}
                    <td className={styles.label}>Í≥ÑÏ†ïÍ≥ºÎ™©Î™Ö</td>
                    <td>{selectedInvoice.slip?.actCode?.actName}</td>{" "}
                  </tr>

                  <tr>
                    <td className={styles.label}>Ï†ÅÏöî ÏΩîÎìú</td>
                    <td>{selectedInvoice.slip?.summaryCode.summaryCode}</td>
                    <td className={styles.label}>Ï†ÅÏöîÎ™Ö</td>
                    <td>{selectedInvoice.slip?.summaryCode.summaryName}</td>
                  </tr>

                  <tr>
                    <td className={styles.label}>ÏÑ∏Ïï°</td>
                    <td colSpan={"3"}>
                      {selectedInvoice.taxVal
                        ? selectedInvoice.taxVal.toLocaleString("ko-KR")
                        : "0"}
                      Ïõê
                    </td>
                  </tr>

                  <tr>
                    <td className={styles.label}>Ìï©Í≥Ñ</td>
                    <td colSpan="3">
                      {(
                        (selectedInvoice.slip?.debit || 0) +
                        (selectedInvoice.slip?.credit || 0)
                      ).toLocaleString("ko-KR")}
                      Ïõê
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          ) : (
            <div className={styles.noData}>
              <img src="/images/icons/document.png" alt="Î¨∏ÏÑú" />
              <p>Ï¢åÏ∏°ÏóêÏÑú ÏÑ∏Í∏à Í≥ÑÏÇ∞ÏÑúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.</p>
            </div>
          )}
        </div>
      </div>

      <SModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        buttons={[
          {
            text: "ÌôïÏù∏",
            onClick: () => setIsModalOpen(false),
            className: modalStyle.confirmButtonS,
          },
        ]}
      >
        <div className={styles.modalContent}>
          <Player
            autoplay
            loop={false}
            keepLastFrame={true}
            src={lottieAnimation} // ‚úÖ ÏÉÅÌÉú Ï†ÅÏö©
            style={{ height: "100px", width: "100px", margin: "0 auto" }}
          />
          <p
            style={{
              fontSize: "16px",
              fontWeight: "bold",
              textAlign: "center",
              paddingTop: "18px",
            }}
          >
            {modalMessage}
          </p>
        </div>
      </SModal>
    </>
  );
}

export default Duty;
