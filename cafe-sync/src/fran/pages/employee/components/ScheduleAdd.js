import { useState, useEffect } from "react";
import Modal from "../../../../components/Modal";
import SModal from "../../../../components/SModal";
import { Player } from "@lottiefiles/react-lottie-player";
import modalStyle from "../../../../components/ModalButton.module.css";
import style from "../styles/ScheduleAdd.module.css";

const ScheduleAdd = ({ isModalOpen, setIsModalOpen, franCode, onScheduleUpdate, existingSchedules }) => {
  const today = new Date().toISOString().split("T")[0];

  const divisionOption = [
    { label: "Ïò§Ìîà", value: 1 }, 
    { label: "ÎØ∏Îì§", value: 2 }, 
    { label: "ÎßàÍ∞ê", value: 3 }, 
    { label: "Ìú¥Í∞Ä", value: 4 }
  ];

  const [workerList, setWorkerList] = useState([]);
  const [scheduleDate, setScheduleDate] = useState(today);
  const [workers, setWorkers] = useState([
    { empCode: "", empName: "", division: "", scheduleDate: today, key: Date.now() },
  ]);
  const [addError, setAddError] = useState("");
  const [lottieAnimation, setLottieAnimation] = useState("");
  const [isSModalOpen, setIsSModalOpen] = useState(false);
  const [modalMessage, setModalMessage] = useState("");
  
  useEffect( () => { if (franCode) { fetchWorkers(); } }, [franCode] );
    
  const fetchWorkers = async () => {
    if(!franCode) return;
    
    try {
      let token = sessionStorage.getItem("accessToken");
      const responseWorker = await fetch(`http://localhost:8080/api/fran/employee/workers/${franCode}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        }
      });

      if(!responseWorker.ok) {throw new Error("Í∑ºÎ°úÏûê ÏùëÎãµ Ïã§Ìå®")};

      const workerData = await responseWorker.json();

      setWorkerList(workerData.map(worker => ({
        empCode: worker.empCode,
        empName: worker.empName
      })));

    } catch (error) {
      console.log("Ï°∞Ìöå Ïò§Î•ò!!!", error);
    }
  }

  // ‚úÖ Í∑ºÎ°úÏûê Ï∂îÍ∞Ä
  const addWorkerHandler = () => {
    const newWorker = { empCode: "", empName: "", division: "", scheduleDate: scheduleDate, key: Date.now() };
    setWorkers((prevWorkers) => [...prevWorkers, newWorker]);
  };
  

  // ‚úÖ Í∑ºÎ°úÏûê ÏÇ≠Ï†ú
  const rmWorkerHandler = (removeKey) => {
    setWorkers(workers.filter((worker) => worker.key !== removeKey));
  };

  // ‚úÖ Í∑ºÎ°úÏûê/Í∑ºÎ°ú ÏãúÍ∞Ñ Î≥ÄÍ≤Ω
  const workerChangeHandler = (e, key) => {
    const { name, value } = e.target;
  
    setWorkers((prevWorkers) =>
      prevWorkers.map((worker) => {
        if (worker.key === key) {
          const updatedWorker = { ...worker, [name]: value, scheduleDate };
          // ‚úÖ empCode Í∞íÏù¥ Îì§Ïñ¥Ïò¨ Îïå empNameÏùÑ Ï∞æÏïÑ Ìï®Íªò Ï†ÄÏû•
          if (name === "worker") {
            const selectedWorker = workerList.find(w => w.empCode === value);
            updatedWorker.empCode = value;
            updatedWorker.empName = selectedWorker ? selectedWorker.empName : "";
          }
        return updatedWorker;
        }
        return worker;
      })
    );
  };

  useEffect(() => {
    if (workers.length === 0) return;
    // console.log("üõ† workers Î≥ÄÍ≤Ω Í∞êÏßÄ, Ï§ëÎ≥µ Í≤ÄÏÇ¨ Ïã§Ìñâ");

    const hasDuplicate = workers.some((worker, index, self) =>
      worker.empCode &&
      worker.division &&
      self.some(
        (w, i) => i !== index && w.empCode === worker.empCode && w.division === worker.division
      )
    );

    const hasDBDuplicate = workers.some((worker) =>
      existingSchedules.some((schedule) => {
        const scheduleDateFormatted = new Date(schedule.date).toISOString().split("T")[0];
        const workerDateFormatted = new Date(worker.scheduleDate).toISOString().split("T")[0];

        return (
          String(schedule.emp) === String(worker.empCode) &&
          Number(schedule.extendedProps.scheduleDivision) === Number(worker.division) &&
          scheduleDateFormatted === workerDateFormatted
        );
      })
    );

    // console.log("üîç ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Îç∞Ïù¥ÌÑ∞ÎÅºÎ¶¨Ïùò Ï§ëÎ≥µ Ïó¨Î∂Ä:", hasDuplicate);
    // console.log("üîç Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ÏôÄÏùò Ï§ëÎ≥µ Ïó¨Î∂Ä:", hasDBDuplicate);

    if (hasDuplicate || hasDBDuplicate) {
      // console.log("üö® Ï§ëÎ≥µ Î∞úÍ≤¨! Îì±Î°ù Î∂àÍ∞Ä");
      setAddError("ÎèôÏùº Í∑ºÎ¨¥ ÏãúÍ∞ÑÏóê Ï§ëÎ≥µÎêú Í∑ºÎ°úÏûêÍ∞Ä ÏûàÏäµÎãàÎã§.");
    } else {
      // console.log("‚úÖ Ï§ëÎ≥µ ÏóÜÏùå!");
      setAddError("");
    }
  }, [workers, existingSchedules, scheduleDate]); // üî• workers, Í∏∞Ï°¥ Ïä§ÏºÄÏ§Ñ, ÎÇ†Ïßú Î≥ÄÍ≤Ω Ïãú Ïã§Ìñâ  

  const getFilteredSchedules = (date) => {
    // console.log("Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÌïÑÌÑ∞ÎßÅ ÏãúÏûë");
    // console.log("ÌïÑÌÑ∞ÎßÅÌï† ÎÇ†Ïßú", date);
    return existingSchedules.filter((schedule) => {
      // console.log("Í∏∞Ï°¥ Ïä§ÏºÄÏ§Ñ ÎÇ†Ïßú: ", schedule.date);
      return schedule.date === date;
    });
  };  

  const scheduleDateChangeHandler = (e) => {
    setScheduleDate(e.target.value);
  };

  const prepareScheduleData = () => {
    return workers.map(worker => {
      const localDateTime = new Date(scheduleDate);
      localDateTime.setHours(9,0,0,0);
      return {
        scheduleDate: localDateTime.toISOString(),
        empCode: worker.empCode,
        scheduleDivision: Number(worker.division),
        franCode: franCode,
        empName: worker.empName
      }
    });
  };

  const confirmHandler = async () => {

    if (workers.some((w) => !w.empCode || !w.division)) {
      setLottieAnimation("/animations/warning.json"); // ‚ö†Ô∏è Í≤ΩÍ≥† Ïï†ÎãàÎ©îÏù¥ÏÖò
      setModalMessage("Î™®Îì† Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      setIsSModalOpen(true);
      return;
    }

    if(addError) {
      setLottieAnimation("/animations/warning.json"); // ‚ö†Ô∏è Í≤ΩÍ≥† Ïï†ÎãàÎ©îÏù¥ÏÖò
      setModalMessage("ÎèôÏùº Í∑ºÎ¨¥ ÏãúÍ∞ÑÏóê Ï§ëÎ≥µÎêú Í∑ºÎ°úÏûêÍ∞Ä ÏûàÏäµÎãàÎã§. \n ÏàòÏ†ï ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî.");
      setIsSModalOpen(true);
      return;
    }

    const scheduleData = prepareScheduleData();
    // console.log("Î≥¥ÎÇº Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥: ", scheduleData);

    try {
      let token = sessionStorage.getItem("accessToken");
      const resopnse = await fetch("http://localhost:8080/api/fran/schedule", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(scheduleData)
      });
      const savedSchedules = await resopnse.json();
      // console.log('ÏÑ∏Ïù¥Î∏å Îêú Ïä§ÏºÄÏ§Ñ ÏûêÎ£å', savedSchedules);
      if (!resopnse.ok) {
        throw new Error("Ïä§ÏºÄÏ§Ñ Ï†ÄÏû• Ïã§Ìå®„Ö†");
      }

      console.log("Ïä§ÏºÄÏ§Ñ Îì±Î°ù ÏÑ±Í≥µ!!!!!");
      setLottieAnimation("/animations/success-check.json");
      setModalMessage("Ïä§ÏºÄÏ§ÑÏùÑ Ï†ïÏÉÅ Îì±Î°ùÌïòÏòÄÏäµÎãàÎã§.");
      setIsSModalOpen(true);
      setIsModalOpen(true);  // ÏÑ±Í≥µÌñàÏùÑ ÎïåÎßå Î™®Îã¨ Îã´ÏùÑ Ïàò ÏûàÎèÑÎ°ù ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï

      if (onScheduleUpdate) {
        onScheduleUpdate(savedSchedules.data);
      };

      // closeHandler();
    } catch (error) {
      console.log("Ïä§ÏºÄÏ§Ñ Îì±Î°ù Ïã§ Ìå® !", error);
      // alert("Ïä§ÏºÄÏ§Ñ Îì±Î°ù Ïã§Ìå®");
      setLottieAnimation("/animations/warning.json");
      setModalMessage("Ïä§ÏºÄÏ§Ñ Îì±Î°ùÏóê Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§.");
      setIsSModalOpen(true);
      setIsModalOpen(false);
    }
  }

  const closeSmodalHandler = () => {
    setIsSModalOpen(false);
    if (lottieAnimation === "/animations/success-check.json") {
      closeHandler(); // ‚úÖ ÏÑ±Í≥µÌïú Í≤ΩÏö∞Îßå Í∏∞Ï°¥ Î™®Îã¨ Îã´Í∏∞
    }
  };

  const closeHandler = () => {
    setWorkers([{ empCode: "", empName: "", division: "", scheduleDate:today , key: Date.now() }]);
    setIsModalOpen(false);
  };

  return (
    <div>
      <Modal 
        isOpen={isModalOpen} 
        onClose={closeHandler}
        buttons={[
          {
            text: "Îì±Î°ù",
            onClick: confirmHandler,
            className: modalStyle.confirmButtonB
          },
          { 
            text: "Ï∑®ÏÜå", 
            onClick: closeHandler, 
            className: modalStyle.cancelButtonB 
          }
        ]}
      >
        <h2 className={style.schH2}>Ïä§ÏºÄÏ§Ñ Ïã†Í∑ú Îì±Î°ù</h2>
        <hr />
        <div className={style.addContainer}>
          <div className={style.dateContainer}>
            <span>ÎÇ†Ïßú</span>
            <input type="date" onChange={scheduleDateChangeHandler}/>
          </div>
          <div >
            <span className={style.spanH3}>Í∑ºÎ°úÏûê Ï∂îÍ∞Ä</span>
            {addError && <p style={{ display: "inline-block", color: "red", marginBotton: "10px", fontSize: "12px" }}>{addError}</p>}

            <div className={style.workerListContainer}>
              {workers.map(({ worker, division, key }, index) => (
                <div key={key} className={style.workerContainer}>
                  <span className={style.s1}>Í∑ºÎ°úÏûê</span>
                  <select
                    name="worker"
                    value={worker}
                    onChange={(e) => workerChangeHandler(e, key)}
                    className={style.workerBox}
                  >
                    <option value="">ÏÑ†ÌÉù</option>
                    {/* ÏòµÏÖòÏù¥ Ïù¥Í≥≥Ïóê ÎèôÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÎèÑÎ°ù ÌïòÍ∏∞ */}
                    {workerList.map(({empCode, empName}) => (
                      <option key={empCode} value={empCode}>
                        {empName}
                      </option>
                    ))}
                  </select>

                  <span className={style.s2}>Í∑ºÎ°ú ÏãúÍ∞Ñ</span>
                  <select 
                    name="division" 
                    value={division} 
                    onChange={(e) => workerChangeHandler(e, key)}
                    className={style.workerBox}
                  >
                    <option value="">ÏÑ†ÌÉù</option>
                    {divisionOption.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                  <div className={style.btnContainer}>
                    <button onClick={addWorkerHandler} className={style.plusBtn}>+</button>
                    {index > 0 && (
                      <button onClick={() => rmWorkerHandler(key)} className={style.minusBtn}>‚îÄ</button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
        <SModal
          isOpen={isSModalOpen}
          onClose={() => setIsSModalOpen(false)}
          buttons={[
            {
              text: "ÌôïÏù∏",
              onClick: closeSmodalHandler,
              className: modalStyle.confirmButtonS,
            },
          ]}
        >
          <div style={{ textAlign: "center" }}>
            <Player
              autoplay
              loop={false} // ‚úÖ Ïï†ÎãàÎ©îÏù¥ÏÖò Î∞òÎ≥µ X
              keepLastFrame={true} // ‚úÖ Ïï†ÎãàÎ©îÏù¥ÏÖòÏù¥ ÎÅùÎÇòÎèÑ ÎßàÏßÄÎßâ ÌîÑÎ†àÏûÑ Ïú†ÏßÄ
              src={lottieAnimation} // ‚úÖ ÎèôÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎê®
              style={{ height: "100px", width: "100px", margin: "0 auto" }}
            />
            {/* <br /> */}
            <span style={{marginTop: "15px", whiteSpace: "pre-line"}}>{modalMessage}</span>
            <br />
          </div>
        </SModal>
      </Modal>
    </div>
  );
};

export default ScheduleAdd
